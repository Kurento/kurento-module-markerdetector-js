/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the GNU Lesser General Public License (LGPL)
 * version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var OpenCVFilter = kurentoClient.register.abstracts.OpenCVFilter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create an element
 *
 * @classdesc
 *  ArMarkerdetector interface. Documentation about the module
 *
 * @extends module:filters/abstracts.OpenCVFilter
 *
 * @constructor module:markerdetector.ArMarkerdetector
 *
 * @fires {@link module:markerdetector#event:MarkerCount MarkerCount}
 */
function ArMarkerdetector(){
  ArMarkerdetector.super_.call(this);
};
inherits(ArMarkerdetector, OpenCVFilter);


//
// Public methods
//

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.getOverlayImage
 *
 * @param {module:markerdetector.ArMarkerdetector~getOverlayImageCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.getOverlayImage = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getOverlayImage', callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~getOverlayImageCallback
 * @param {external:Error} error
 * @param {external:String} result
 *  TODO
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.getOverlayScale
 *
 * @param {module:markerdetector.ArMarkerdetector~getOverlayScaleCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.getOverlayScale = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getOverlayScale', callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~getOverlayScaleCallback
 * @param {external:Error} error
 * @param {external:Number} result
 *  TODO
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.getOverlayText
 *
 * @param {module:markerdetector.ArMarkerdetector~getOverlayTextCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.getOverlayText = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getOverlayText', callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~getOverlayTextCallback
 * @param {external:Error} error
 * @param {external:String} result
 *  TODO
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.getShowDebugLevel
 *
 * @param {module:markerdetector.ArMarkerdetector~getShowDebugLevelCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.getShowDebugLevel = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getShowDebugLevel', callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~getShowDebugLevelCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 *  show debug info on image
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.setOverlayImage
 *
 * @param {external:String} overlayImage
 *  TODO
 *
 * @param {module:markerdetector.ArMarkerdetector~setOverlayImageCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.setOverlayImage = function(overlayImage, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('String', 'overlayImage', overlayImage, {required: true});

  var params = {
    overlayImage: overlayImage
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setOverlayImage', params, callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~setOverlayImageCallback
 * @param {external:Error} error
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.setOverlayScale
 *
 * @param {external:Number} overlayScale
 *  TODO
 *
 * @param {module:markerdetector.ArMarkerdetector~setOverlayScaleCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.setOverlayScale = function(overlayScale, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('float', 'overlayScale', overlayScale, {required: true});

  var params = {
    overlayScale: overlayScale
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setOverlayScale', params, callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~setOverlayScaleCallback
 * @param {external:Error} error
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.setOverlayText
 *
 * @param {external:String} overlayText
 *  TODO
 *
 * @param {module:markerdetector.ArMarkerdetector~setOverlayTextCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.setOverlayText = function(overlayText, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('String', 'overlayText', overlayText, {required: true});

  var params = {
    overlayText: overlayText
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setOverlayText', params, callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~setOverlayTextCallback
 * @param {external:Error} error
 */

/**
 * TODO
 *
 * @alias module:markerdetector.ArMarkerdetector.setShowDebugLevel
 *
 * @param {external:Integer} showDebugLevel
 *  show debug info on image
 *
 * @param {module:markerdetector.ArMarkerdetector~setShowDebugLevelCallback} [callback]
 *
 * @return {external:Promise}
 */
ArMarkerdetector.prototype.setShowDebugLevel = function(showDebugLevel, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'showDebugLevel', showDebugLevel, {required: true});

  var params = {
    showDebugLevel: showDebugLevel
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setShowDebugLevel', params, callback), this)
};
/**
 * @callback module:markerdetector.ArMarkerdetector~setShowDebugLevelCallback
 * @param {external:Error} error
 */


/**
 * @alias module:markerdetector.ArMarkerdetector.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline}
 */
ArMarkerdetector.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  }
};

/**
 * @alias module:markerdetector.ArMarkerdetector.events
 *
 * @extends module:filters/abstracts.OpenCVFilter.events
 */
ArMarkerdetector.events = OpenCVFilter.events.concat(['MarkerCount']);


/**
 * Checker for {@link module:markerdetector.ArMarkerdetector}
 *
 * @memberof module:markerdetector
 *
 * @param {external:String} key
 * @param {module:markerdetector.ArMarkerdetector} value
 */
function checkArMarkerdetector(key, value)
{
  if(!(value instanceof ArMarkerdetector))
    throw ChecktypeError(key, ArMarkerdetector, value);
};


module.exports = ArMarkerdetector;

ArMarkerdetector.check = checkArMarkerdetector;
